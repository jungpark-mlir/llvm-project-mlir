// -convert-parallel-loops-to-gpu
module {
  func @main0(%arg0: memref<256x128x28x28xf32>, %arg1: memref<256x128x13x13x4x4xf32>) attributes {kernel} {
    %c0 = arith.constant 0 : index
    %c256 = arith.constant 256 : index
    %c1 = arith.constant 1 : index
    scf.for %arg2 = %c0 to %c256 step %c1 {
      %c128 = arith.constant 128 : index
      scf.for %arg3 = %c0 to %c128 step %c1 {
        %c13 = arith.constant 13 : index
        scf.for %arg4 = %c0 to %c13 step %c1 {
          scf.for %arg5 = %c0 to %c13 step %c1 {
            %0 = memref.alloca() : memref<4x4xf32>
            %1 = memref.alloca() : memref<4x4xf32>
            %c4 = arith.constant 4 : index
            scf.parallel (%arg6) = (%c0) to (%c4) step (%c1) {
              scf.parallel (%arg7) = (%c0) to (%c4) step (%c1) {
                %c2_0 = arith.constant 2 : index
                %61 = arith.muli %arg4, %c2_0 : index
                %62 = arith.addi %61, %arg6 : index
                %63 = arith.muli %arg5, %c2_0 : index
                %64 = arith.addi %63, %arg7 : index
                %65 = memref.load %arg0[%arg2, %arg3, %62, %64] : memref<256x128x28x28xf32>
                memref.store %65, %0[%arg6, %arg7] : memref<4x4xf32>
                scf.yield
              }
              scf.yield
            }
            %c2 = arith.constant 2 : index
            %c3 = arith.constant 3 : index
            %2 = memref.load %0[%c0, %c0] : memref<4x4xf32>
            %3 = memref.load %0[%c0, %c1] : memref<4x4xf32>
            %4 = memref.load %0[%c0, %c2] : memref<4x4xf32>
            %5 = memref.load %0[%c0, %c3] : memref<4x4xf32>
            %6 = memref.load %0[%c1, %c0] : memref<4x4xf32>
            %7 = memref.load %0[%c1, %c1] : memref<4x4xf32>
            %8 = memref.load %0[%c1, %c2] : memref<4x4xf32>
            %9 = memref.load %0[%c1, %c3] : memref<4x4xf32>
            %10 = memref.load %0[%c2, %c0] : memref<4x4xf32>
            %11 = memref.load %0[%c2, %c1] : memref<4x4xf32>
            %12 = memref.load %0[%c2, %c2] : memref<4x4xf32>
            %13 = memref.load %0[%c2, %c3] : memref<4x4xf32>
            %14 = memref.load %0[%c3, %c0] : memref<4x4xf32>
            %15 = memref.load %0[%c3, %c1] : memref<4x4xf32>
            %16 = memref.load %0[%c3, %c2] : memref<4x4xf32>
            %17 = memref.load %0[%c3, %c3] : memref<4x4xf32>
            %18 = arith.subf %2, %10 : f32
            %19 = arith.subf %18, %4 : f32
            %20 = arith.addf %19, %12 : f32
            %21 = arith.subf %3, %11 : f32
            %22 = arith.addf %21, %4 : f32
            %23 = arith.subf %22, %12 : f32
            %24 = arith.subf %11, %3 : f32
            %25 = arith.addf %24, %4 : f32
            %26 = arith.subf %25, %12 : f32
            %27 = arith.subf %21, %5 : f32
            %28 = arith.addf %27, %13 : f32
            %29 = arith.addf %6, %10 : f32
            %30 = arith.subf %29, %8 : f32
            %31 = arith.subf %30, %12 : f32
            %32 = arith.addf %7, %11 : f32
            %33 = arith.addf %32, %8 : f32
            %34 = arith.addf %33, %12 : f32
            %35 = arith.addf %8, %12 : f32
            %36 = arith.subf %35, %7 : f32
            %37 = arith.subf %36, %11 : f32
            %38 = arith.subf %32, %9 : f32
            %39 = arith.subf %38, %13 : f32
            %40 = arith.subf %10, %6 : f32
            %41 = arith.subf %40, %12 : f32
            %42 = arith.addf %41, %8 : f32
            %43 = arith.subf %11, %7 : f32
            %44 = arith.addf %43, %12 : f32
            %45 = arith.subf %44, %8 : f32
            %46 = arith.subf %7, %11 : f32
            %47 = arith.addf %46, %12 : f32
            %48 = arith.subf %47, %8 : f32
            %49 = arith.subf %43, %13 : f32
            %50 = arith.addf %49, %9 : f32
            %51 = arith.subf %6, %14 : f32
            %52 = arith.subf %51, %8 : f32
            %53 = arith.addf %52, %16 : f32
            %54 = arith.subf %7, %15 : f32
            %55 = arith.addf %54, %8 : f32
            %56 = arith.subf %55, %16 : f32
            %57 = arith.subf %15, %7 : f32
            %58 = arith.addf %57, %8 : f32
            %59 = arith.subf %58, %16 : f32
            %60 = arith.subf %55, %17 : f32
            memref.store %20, %1[%c0, %c0] : memref<4x4xf32>
            memref.store %23, %1[%c0, %c1] : memref<4x4xf32>
            memref.store %26, %1[%c0, %c2] : memref<4x4xf32>
            memref.store %28, %1[%c0, %c3] : memref<4x4xf32>
            memref.store %31, %1[%c1, %c0] : memref<4x4xf32>
            memref.store %34, %1[%c1, %c1] : memref<4x4xf32>
            memref.store %37, %1[%c1, %c2] : memref<4x4xf32>
            memref.store %39, %1[%c1, %c3] : memref<4x4xf32>
            memref.store %42, %1[%c2, %c0] : memref<4x4xf32>
            memref.store %45, %1[%c2, %c1] : memref<4x4xf32>
            memref.store %48, %1[%c2, %c2] : memref<4x4xf32>
            memref.store %50, %1[%c2, %c3] : memref<4x4xf32>
            memref.store %53, %1[%c3, %c0] : memref<4x4xf32>
            memref.store %56, %1[%c3, %c1] : memref<4x4xf32>
            memref.store %59, %1[%c3, %c2] : memref<4x4xf32>
            memref.store %60, %1[%c3, %c3] : memref<4x4xf32>
            scf.parallel (%arg6) = (%c0) to (%c4) step (%c1) {
              scf.parallel (%arg7) = (%c0) to (%c4) step (%c1) {
                %61 = memref.load %1[%arg6, %arg6] : memref<4x4xf32>
                memref.store %61, %arg1[%arg2, %arg3, %arg4, %arg5, %arg6, %arg7] : memref<256x128x13x13x4x4xf32>
                scf.yield
              }
              scf.yield
            }
          } { mapping = [{processor = 3, map = affine_map<(d0) -> (d0)>, bound = affine_map<(d0) -> (d0)>}] }
        } { mapping = [{processor = 4, map = affine_map<(d0) -> (d0)>, bound = affine_map<(d0) -> (d0)>}] }
      } { mapping = [{processor = 0, map = affine_map<(d0) -> (d0)>, bound = affine_map<(d0) -> (d0)>}] }
    } { mapping = [{processor = 1, map = affine_map<(d0) -> (d0)>, bound = affine_map<(d0) -> (d0)>}] }
    return
  }
}
