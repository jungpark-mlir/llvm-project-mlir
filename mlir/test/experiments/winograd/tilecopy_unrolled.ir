// ./bin/miopen-opt --cse --canonicalize -affine-loop-unroll='unroll-factor=4' ./ur0.ir >ur1.ir
// ./bin/miopen-opt --cse --pass-pipeline="func.func(convert-affine-for-to-gpu{gpu-block-dims=3 gpu-thread-dims=1})" --lower-affine --canonicalize ./ur1.ir |./bin/miopen-gen -ph -rand none - > ur1.out
// /home/rocprofiler_pkg/rocprof --stats ./bin/mlir-rocm-runner --shared-libs=/home/llvm-project-mlir/build/lib/librocm-runtime-wrappers.so,/home/llvm-project-mlir/build/external/llvm-project/llvm/lib/libmlir_runner_utils.so --entry-point-result=void ./ur1.out

#map0 = affine_map<(d0, d1) -> (d0 * 2 + d1)>
#map1 = affine_map<(d0) -> (d0 * 2)>
#map2 = affine_map<(d0, d1) -> (d0 * 4 + d1)>
#map3 = affine_map<(d0) -> (d0 + 1)>
#map4 = affine_map<(d0) -> (d0 + 2)>
#map5 = affine_map<(d0) -> (d0 + 3)>
module {
  func @main0(%arg0: memref<256x128x28x28xf32>, %arg1: memref<256x128x52x52xf32>) attributes {kernel} {
    %c0 = arith.constant 0 : index
    affine.for %arg2 = 0 to 256 {
      affine.for %arg3 = 0 to 128 {
        affine.for %arg4 = 0 to 13 {
          affine.for %arg5 = 0 to 13 {
            affine.for %arg6 = 0 to 4 {
              %0 = affine.apply #map0(%arg4, %arg6)
              %1 = affine.apply #map1(%arg5)
              %2 = arith.index_cast %arg2 : index to i32
              %3 = arith.index_cast %arg3 : index to i32
              %4 = arith.index_cast %0 : index to i32
              %5 = arith.index_cast %1 : index to i32
              %6 = amdgpu.raw_buffer_load {boundsCheck = true, targetIsRDNA = false} %arg0[%2, %3, %4, %5] : memref<256x128x28x28xf32>, i32, i32, i32, i32 -> vector<4xf32>
              %7 = affine.apply #map2(%arg4, %arg6)
              %8 = arith.index_cast %7 : index to i32
              %9 = vector.extractelement %6[%c0 : index] : vector<4xf32>
              %10 = affine.apply #map2(%arg5, %c0)
              %11 = arith.index_cast %10 : index to i32
              amdgpu.raw_buffer_store {boundsCheck = true, targetIsRDNA = false} %9 -> %arg1[%2, %3, %8, %11] : f32 -> memref<256x128x52x52xf32>, i32, i32, i32, i32
              %12 = affine.apply #map3(%c0)
              %13 = vector.extractelement %6[%12 : index] : vector<4xf32>
              %14 = affine.apply #map2(%arg5, %12)
              %15 = arith.index_cast %14 : index to i32
              amdgpu.raw_buffer_store {boundsCheck = true, targetIsRDNA = false} %13 -> %arg1[%2, %3, %8, %15] : f32 -> memref<256x128x52x52xf32>, i32, i32, i32, i32
              %16 = affine.apply #map4(%c0)
              %17 = vector.extractelement %6[%16 : index] : vector<4xf32>
              %18 = affine.apply #map2(%arg5, %16)
              %19 = arith.index_cast %18 : index to i32
              amdgpu.raw_buffer_store {boundsCheck = true, targetIsRDNA = false} %17 -> %arg1[%2, %3, %8, %19] : f32 -> memref<256x128x52x52xf32>, i32, i32, i32, i32
              %20 = affine.apply #map5(%c0)
              %21 = vector.extractelement %6[%20 : index] : vector<4xf32>
              %22 = affine.apply #map2(%arg5, %20)
              %23 = arith.index_cast %22 : index to i32
              amdgpu.raw_buffer_store {boundsCheck = true, targetIsRDNA = false} %21 -> %arg1[%2, %3, %8, %23] : f32 -> memref<256x128x52x52xf32>, i32, i32, i32, i32
            }
          }
        }
      }
    }
    return
  }
}